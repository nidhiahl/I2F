# -*- coding: utf-8 -*-
"""rrcf_streaming.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J7x-J0PyyNyD64ZoqKpK6Kdai9ERWb8u
"""


import numpy as np
import rrcf
import pandas as pd
# Generate data
n = 730
A = 50
center = 100
phi = 30
T = 2*np.pi/100
t = np.arange(n)
sin = A*np.sin(T*t-phi*T) + center
sin[235:255] = 80

# Set tree parameters
num_trees = 40
shingle_size = 4
tree_size = 256

# Create a forest of empty trees
forest = []
for _ in range(num_trees):
    tree = rrcf.RCTree()
    forest.append(tree)

# Use the "shingle" generator to create rolling window
points = rrcf.shingle(sin, size=shingle_size)
points = np.vstack([point for point in points])
# Create a dict to store anomaly score of each point
avg_codisp = {}
avg_codisp=pd.Series(0.0, index=np.arange(n))
# For each shingle...
for index, point in enumerate(points):
    # For each tree in the forest...
    for tree in forest:
        # If tree is above permitted size...
        if len(tree.leaves) > tree_size:
            # Drop the oldest point (FIFO)
            tree.forget_point(index - tree_size)
        # Insert the new point into the tree
        tree.insert_point(point, index=index)
        # Compute codisp on the new point...
        new_codisp = tree.codisp(index)
        # And take the average over all trees
        if not index in avg_codisp:
            avg_codisp[index] = 0
        avg_codisp[index] += new_codisp / num_trees

avg_codisp



import pandas as pd
from sklearn.ensemble import IsolationForest
contamination = 2/730
#IF = IsolationForest(n_estimators=num_trees, contamination=contamination, behaviour='new', random_state=0)
IF = IsolationForest(n_estimators=num_trees, contamination=contamination, random_state=4)
IF.fit(points)
if_scores = IF.score_samples(points)
if_scores = pd.Series(-if_scores, index=range(727))
if_scores

from matplotlib import pyplot as plt
import seaborn as sns
#avg_codisp = ((avg_codisp - avg_codisp.min())/ (avg_codisp.max() - avg_codisp.min()))

#if_scores = ((if_scores - if_scores.min())/ (if_scores.max() - if_scores.min()))

fig, ax = plt.subplots(2, figsize=(10, 6))
#if_scores=if_scores/100
if_scores.plot(ax=ax[0], color='#7EBDE6',alpha=0.4)

avg_codisp.plot(ax=ax[1], color='#E8685D',alpha=0.8)


plt.show()

